(()=>{"use strict";var t={d:(e,s)=>{for(var n in s)t.o(s,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:s[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{changes:()=>S,compute:()=>B,init:()=>D,resetChanges:()=>T});class s extends class{constructor(){this.memory=new Map}get(t,e){return this.memory.get(t)?.get(e)}set(t,e,s){const{memory:n}=this;n.has(t)||n.set(t,new Map),n.get(t).set(e,s)}rows(){return Array.from(this.memory.keys())}cols(t){return Array.from(this.memory.get(t)?.keys()||[])}del(t,e){this.memory.get(t)?.delete(e)}}{constructor(){super(),this.changes=[]}get(t,e){return this.memory.get(t)?.get(e)}set(t,e,s){const{memory:n,changes:o}=this;n.has(t)||n.set(t,new Map),n.get(t).set(e,s),o.push({row:t,col:e,value:s})}rows(){return Array.from(this.memory.keys())}cols(t){return Array.from(this.memory.get(t)?.keys()||[])}del(t,e){this.memory.get(t)?.delete(e)}reset(){this.changes=[]}}const n=Math.PI/180;function o(t){return Math.cos(t*n)}function r(t){return Math.sin(t*n)}async function a(t=0){return new Promise((e=>setTimeout(e,t)))}function i(t,e){return Math.floor(Math.random()*(e-t+1)+t)}const c=document.getElementById("map-background-layer").getContext("2d");c.imageSmoothingEnabled=!1;const h=document.getElementById("map-main-layer").getContext("2d");h.imageSmoothingEnabled=!1;const l=document.getElementById("player-main-layer").getContext("2d");l.imageSmoothingEnabled=!1;const y=document.getElementById("player-path-layer").getContext("2d");y.imageSmoothingEnabled=!1;const d={w:!1,a:!1,s:!1,d:!1};document.addEventListener("keydown",(({key:t})=>{switch(t){case"w":d.w=!0;break;case"a":d.a=!0;break;case"s":d.s=!0;break;case"d":d.d=!0}})),document.addEventListener("keyup",(({key:t})=>{switch(t){case"w":d.w=!1;break;case"a":d.a=!1;break;case"s":d.s=!1;break;case"d":d.d=!1}}));class u{constructor(t=250,e=250,s=30,n=0){this.x=t+s,this.y=e+s,this.rx=t,this.ry=e,this.dir=n,this.length=s}update(){this.dir++,this.dir>=360&&(this.dir=0);const{dir:t}=this,e=this.length;return this.x=this.rx+Math.round(e*o(t)-0*r(t)),this.y=this.ry+Math.round(e*r(t)+0*o(t)),{x:this.x,y:this.y}}}const g=Object.assign([],{update(){for(let t=0,e=g.length;t<e;t++)g[t].update()}});for(let t=30;t<50;t++)g.push(new u(250,250,t));const m=new Image;m.src="assets/maze.png";const f=m.width,x=m.height,p={x:100,y:100},w=Object.assign(new Array(x).fill(0).map((()=>new Array(f).fill(0))),{data:[],dir:0,reset:function(){const{data:t}=this;for(let e=0,s=x;e<s;e++)for(let s=0,n=f;s<n;s++)w[e][s]=+!t[e*f+s];for(let t=0,e=g.length;t<e;t++){const{x:e,y:s}=g[t];w[s][e]=1}w[250][250]=100},set(t){this.data=Array.from(t.filter(((t,e)=>e%4==0)))}}),M=w;class b{constructor(t,e=100){this.integrals=[],this.dir=t;const s=e;this.dx=Math.round(s*o(t)-0*r(t)),this.dy=Math.round(s*r(t)+0*o(t))}update(t,e){const[s,n,o]=function(t,e,s,n){const o=Math.abs(s-t),r=Math.abs(n-e),a=t<s?1:-1,i=e<n?1:-1;let c=o-r;const h=[];for(;;){const l=M[e]?.[t];if(100===l)return[h,void 0,{x:t,y:e}];if(void 0===l||1===l)return[h,{x:t,y:e},void 0];if(t===s&&e===n)return[h,void 0];h.push({x:t,y:e});const y=2*c;y>-r&&(c-=r,t+=a),y<o&&(c+=o,e+=i)}}(t,e,t+this.dx,e+this.dy);return this.integrals=s,[0===s.length,n,o]}}const{sqrt:k}=Math;let I,v,P,E;function D(t,e){v=[],I=e,P=t.memory,E=new s;const{x:n,y:o}=t,r=C({x:n,y:o},I);v.push({x:n,y:o,ds:0,dg:r,cost:r})}function S(){return E.changes}function T(){E.reset()}function B(){v.sort(F);const t=v.pop(),{x:e,y:s,ds:n}=t;E.set(s,e,1);for(let o=s+2;--o>=s-1;)for(let s=e+2;--s>=e-1;){const e={x:s,y:o,parent:t},r=P.get(o,s);if(s===I.x&&o===I.y)return A(e,[]);if(2===r||1===E.get(o,s))continue;const a=.95*n+C(e,t),i=C(e,I),c=a+i,h=O(e);h?h.cost>c&&(h.cost=c,h.ds=a,h.dg=i,h.parent=t):v.push({...e,cost:c,ds:a,dg:i})}}function C(t,e){const s=t.x-e.x,n=t.y-e.y;return k(s*s+n*n)}function F(t,e){return e.cost-t.cost||e.dg-t.dg}function A(t,e){e.push(t);const{parent:s}=t;return s?A(s,e):e}function O(t){const{x:e,y:s}=t;for(let t=v.length;--t>=0;){const n=v[t];if(e===n.x&&s===n.y)return n}}const j=l.createImageData(f+2,x+2);let $=y.createImageData(f+2,x+2);const L=4*(f+2);function G(){const t=p.y+1,e=p.x+1,{data:s}=$,n=S();for(let o=0,r=n.length;o<r;o++){const{row:r,col:a,value:i}=n[o],c=(r+t)*L+4*(a+e);switch(i){case 1:s[c]=255;break;case 2:s[c+1]=255}s[c+3]=255}y.putImageData($,0,0),T()}const R=new class{constructor(t=0,n=0,o=360){this.memory=new s,this.dir=0,this.rays=[],this.path=[],this.goalDirections=[],this.x=t,this.y=n,this.pathfinder=e;for(let t=0;t<360;t+=360/o)this.rays.push(new b(t,50))}findGoal(t,e){if(this.goalDirections.length>10){const t=100,e=0;for(const{x:s,y:n,dir:a}of this.goalDirections){const i=s+Math.round(t*o(a)-e*r(a)),c=n+Math.round(t*r(a)+e*o(a))-n,h=s-i,l=c*s+h*n;for(const{x:s,y:n,dir:a}of this.goalDirections){const i=s+Math.round(t*o(a)-e*r(a)),y=n+Math.round(t*r(a)+e*o(a))-n,d=s-i,u=y*s+d*n,g=c*d-y*h;if(0!==g)return void(this.goal={x:Math.round((d*l-h*u)/g),y:Math.round((c*u-y*l)/g)})}}}const{x:s,y:n,dir:a}=this;this.goalDirections.push({x:s+t,y:n+e,dir:a}),this.path.push({x:s+i(-1,1),y:n+i(-1,1)})}async update(t,e){this.dir=function(t,e,s,n){const o=t-250,r=e-250,a=180*Math.atan2(-r,-o)/Math.PI;return a<0?a+360:a}(this.x+t,this.y+e),this.x+t===this.goal?.x&&this.y+e===this.goal?.y&&(this.goal=void 0,this.goalDirections=[]),this.goal||this.findGoal(t,e),this.goal&&0===this.path.length&&await this.computePath(t,e);const{x:s,y:n}=this.path.pop();this.x=s,this.y=n;const a=[],{rays:i,memory:c}=this;for(let h=0,l=i.length;h<l;h++){const l=i[h],[y,d,u]=l.update(this.x+t,this.y+e);if(u&&(this.goal=u,c.set(u.y-e,u.x-t,3)),y){const{dir:a}=l,i=Math.round(o(a)-r(a)),c=Math.round(r(a)+o(a));return this.path=[{x:s+i,y:n+c}],this.update(t,e)}d&&a.push(d)}c.reset();for(let s=0,n=a.length;s<n;s++){const{x:n,y:o}=a[s];2!==c.get(o-e,n-t)&&c.set(o-e,n-t,2)}for(let s=0,n=i.length;s<n;s++){const{integrals:n}=i[s];for(let s=0,o=n.length;s<o;s++){const{x:o,y:r}=n[s];1!==c.get(r-e,o-t)&&c.set(r-e,o-t,1)}}}async computePath(t,e){const{path:s,goal:n,pathfinder:o}=this;if(0===s.length&&n){let s;for(o.init(this,{x:n.x-t,y:n.y-e}),$=y.createImageData(f+2,x+2);!s;)s=o.compute(),G(),await a();this.path=s}}},_=new class{constructor(){this.time=0,this.start()}start(){this.time=performance.now()}end(){return performance.now()-this.time}},q=document.getElementById("fps"),z=document.getElementById("player-pos"),H=document.getElementById("player-actual-pos"),J=document.getElementById("player-estimate");let K=0;async function N(){_.start(),g.update(),M.reset(),await R.update(p.x,p.y),Q(N)}function Q(t){!function(){h.clearRect(0,0,f,x),h.strokeStyle="#CDCDCD";const{rays:t,dir:e}=R;for(let e=0,s=t.length;e<s;e++){const s=t[e].integrals;s[0]&&(h.beginPath(),h.moveTo(s[0].x,s[0].y),h.lineTo(s[s.length-1].x,s[s.length-1].y),h.stroke())}h.fillStyle="#000000",g.forEach((({x:t,y:e})=>{h.fillRect(t,e,1,1),h.fill()}));const s=R.x+p.x,n=R.y+p.y;h.fillStyle="#FF0000",h.beginPath(),h.arc(s,n,2,0,2*Math.PI),h.fill()}(),function(){const t=p.y+1,e=p.x+1,{changes:s}=R.memory,{data:n}=j;let o;for(let r=0,a=s.length;r<a;r++){const{row:a,col:i,value:c}=s[r],h=(a+t)*L+4*(i+e);switch(c){case 1:n[h]=50,n[h+1]=205,n[h+2]=50;break;case 2:n[h]=0,n[h+1]=0,n[h+2]=0;break;case 3:n[h]=0,n[h+1]=0,n[h+2]=255,o={x:i,y:a}}n[h+3]=255}l.putImageData(j,0,0),l.fillStyle="#FF0000",l.beginPath(),l.arc(R.x+e,R.y+t,2,0,2*Math.PI),l.fill(),o&&(l.fillStyle="#0000FF",l.beginPath(),l.arc(o.x+e,o.y+t,2,0,2*Math.PI),l.fill())}(),z.innerText=`memory x: ${R.x}, y: ${R.y}`,J.innerText=R.goal?`x: ${R.goal.x}, y: ${R.goal.y}`:"searching",H.innerText=`actual x: ${R.x+p.x}, y: ${R.y+p.y}`,K=_.end(),setTimeout(t,6.944444444444445-K)}window.onload=async function(){console.log("Load ok"),c.drawImage(m,0,0),M.set(c.getImageData(0,0,f,x).data),c.fillStyle="#0000FF",c.beginPath(),c.arc(250,250,2,0,2*Math.PI),c.fill(),M.reset(),console.log("starting..."),V()},setInterval((()=>q.innerText="fps "+Math.floor(1e3/K)),100);let U=!1;function V(){const t=(d.s?-1:0)+(d.w?1:0),e=(d.d?-1:0)+(d.a?1:0);p.x+=e,p.y+=t,Q(U?N:V)}document.addEventListener("keydown",(({key:t})=>{" "!==t||U||(U=!0)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,